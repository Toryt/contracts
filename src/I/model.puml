@startuml

class Function {
  +name: String <<readonly>>
  +/displayName: String
  +apply(…): Function
  +call(…): Function
  +bind(…): Function
  +toString(): String
}
class Error {
  +name: Any
  +message: Any
  +/stack: String <<readonly>>
  +toString(): String
}

interface FunctionWithImplementation

Function <.. FunctionWithImplementation: instanceof
FunctionWithImplementation --> "implementation" Function

abstract class Contract {
  +{static} displayNamePrefix: String
  +pre: Array <<readonly>>
  +post: Array <<readonly>>
  +exception: Array <<readonly>>
  +location: String <<readonly>>
  +{static} displayNamePrefix: String
  +{static} root: Contract
  +{static} contractFunctionDisplayName(f: FunctionWithImplementation): String
  +{static} bindContractFunction: Function
  +{static} isAContractFunction(f: Any): Boolean
  +{static} bless(contractFunction: ContractFunction, contract: Contract, implFunction: Function, location: String): void
  +{static} falseCondition(): Boolean = false
  +{static} Contract(pre: Function[]?, post: Function[]?, exception: Function[]?)
}

class ImplementableContract {
  +{static} ImplementableContract(pre: Function[]?, post: Function[]?, exception: Function[]?)
  +implementation(implFunction: Function): ContractFunction
}
Contract <|-- ImplementableContract

interface ContractFunction {
  +location: String <<readonly>>
  +/displayName: String
  +bind(…): ContractFunction
}

class AbstractContractFunction
ContractFunction <|- AbstractContractFunction

Contract +-- ContractFunction
FunctionWithImplementation <|-- ContractFunction

ContractFunction --> "contract" Contract
Contract --> "abstract <<readonly>>" AbstractContractFunction

abstract class ContractError {
  +name: String = "Contract Error"
  +message: String <<readonly>>
  +/stack: String <<multiline>>
  +{static} ContractError(message)
}
Error <|-- ContractError

class AbstractError {
  +name: String = "Abstract Error"
  +message: String = ""
  +{static} AbstractError(contract)
}
Contract +-- AbstractError
ContractError <|-- AbstractError
AbstractContractFunction ..> AbstractError : "<<throws>>"

AbstractError --> "contract <<readonly>>" Contract

abstract class ConditionError {
  +name: String = "Contract Condition Error"
  +self: Object <<readonly>>
  +args: ArrayLike <<readonly>>
  +/stack: String <<multiline>>
  +{static} ConditionError(contractFunction, condition, self, args)
  #moreDetail(): String
  +{static} createMessage(contractFunction, condition, self, args): String
}
ContractError <|-- ConditionError

class ConditionMetaError {
  +{static} name: String <<readonly>>
  +error: Any <<readonly>>
  +message: String <<readonly>>
  +{static} ConditionMetaError(contractFunction, condition, self, args, error)
  #moreDetail(): String
  +{static} createMessage(contractFunction, condition, self, args): String
}

abstract class ConditionViolation {
  +{static} name: String <<readonly>>
  +message: String <<readonly>>
  +{static} ConditionViolation(contractFunction, condition, self, args)
  +{static} createMessage(contractFunction, condition, self, args): String
  +{static} verify(contractFunction, condition, self, args): void <<prototype>>
  +{static} verifyAll(contractFunction, conditions, self, args): void <<prototype>>
}
class PreconditionViolation {
  +{static} name: String <<readonly>>
  +message: String <<readonly>>
  +{static} PreconditionViolation(contractFunction, condition, self, args)
  +{static} createMessage(contractFunction, condition, self, args): String
}
class PostconditionViolation <<todo>> {
  +{static} name: String <<readonly>>
  +result: Any <<readonly>>
  +message: String <<readonly>>
  +{static} PostconditionViolation(contractFunction, condition, self, args, result: Any)
  #moreDetail(): String
  +{static} createMessage(contractFunction, condition, self, args): String
}

class ExceptionConditionViolation <<todo>> {
  +{static} name: String <<readonly>>
  +exception: Any <<readonly>>
  +message: String <<readonly>>
  +{static} ExceptionConditionViolation(contractFunction, condition, self, args, exception: Any)
  #moreDetail(): String
  +{static} createMessage(contractFunction, condition, self, args): String
}

ConditionError --> "contractFunction <<readonly>>" ContractFunction
ConditionError --> "condition <<readonly>>" Function
ConditionError --> "_stackSource <<readonly, frozen>>" Error

ConditionError <|-- ConditionMetaError
ConditionError <|-- ConditionViolation

ConditionViolation <|-- PreconditionViolation
ConditionViolation <|-- PostconditionViolation
ConditionViolation <|-- ExceptionConditionViolation

ImplementableContract ..> ConditionMetaError: <<use>>
ImplementableContract ..> PreconditionViolation: <<use>>
ImplementableContract ..> PostconditionViolation: <<use>>
ImplementableContract ..> ExceptionConditionViolation: <<use>>
ImplementableContract ..> ContractFunction: <<generates>>

@enduml
