const build = `manual ${new Date().toISOString()}`
console.log(`build: ${build}`)

const credentials = {
  project: 'Toryt contracts',
  build: build,
  'browserstack.user': process.env.BROWSERSTACK_USERNAME,
  'browserstack.key': process.env.BROWSERSTACK_ACCESS_KEY
}

const oses = {
  osX: {
    name: 'OS X',
    versions: ['High Sierra']
  },
  windows: {
    name: 'Windows',
    versions: ['10'/*, '8.1'*/]
  }
}

const browsers = {
/*
  chrome: {
    name: 'Chrome',
    versions: ['67.0', '66.0']
  },
  edge: {
    name: 'Edge',
    versions: ['17.0', 'insider preview'],
    os: 'Windows'
  },
*/
/* MUDO firefox dpes not work on Mac, nor Windows
  firefox: {
    name: 'Firefox',
    versions: ['61.0']
  },
*/
  safari: {
    name: 'Safari',
    versions: ['11.1'],
    os: 'OS X'
  }
}

function name(capabilities) {
  return `${capabilities.browser} ${capabilities.browser_version} - ${capabilities.os} ${capabilities.os_version}`
}

function osVersionDefinition (capabilities, version) {
  capabilities.os_version = version
  return {
    name: name(capabilities),
    capabilities: capabilities
  }
}

function osDefinition (capabilities, os) {
  if (capabilities.os && capabilities.os !== os.name) {
    return []
  }
  capabilities.os = os.name
  return os.versions.map(v => osVersionDefinition(Object.assign({}, capabilities), v))
}

function browserVersionDefinition (capabilities, version) {
  capabilities.browser_version = version
  return Object.keys(oses).reduce(
    (acc, os) => {
      return acc.concat(osDefinition(Object.assign({}, capabilities), oses[os]))
    },
    []
  )
}

function browserDefinition (capabilities, browser) {
  capabilities.browser = browser.name
  if (browser.os) {
    capabilities.os = browser.os
  }
  return browser.versions.reduce(
    (acc, v) => acc.concat(browserVersionDefinition(Object.assign({}, capabilities), v)),
    []
  )
}

function definition (capabilities) {
  return Object.keys(browsers).reduce(
    (acc, browser) => acc.concat(browserDefinition(Object.assign({}, capabilities), browsers[browser])),
    []
  )
}

const definitions = definition(credentials)
console.log(`${definitions.length}:`, definitions.map(d => d.name))

module.exports = {
  "hostname": "hub-cloud.browserstack.com",
  "port": 80,
  "browsers": definitions
}
