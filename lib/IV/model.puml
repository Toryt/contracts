/*
 Copyright 2017 - 2018 by Jan Dockx

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

@startuml

class Function {
  +name: String <<readonly>>
  +/displayName: String
  +apply(…): Function
  +call(…): Function
  +bind(…): Function
  +toString(): String
}
class Error {
  +name: Any
  +message: Any
  +/stack: String <<readonly>>
  +toString(): String
}

Function <.. GeneralContractFunction: instanceof
GeneralContractFunction --> "implementation" Function

abstract class AbstractContract {
  +pre: Array <<readonly>>
  +post: Array <<readonly>>
  +exception: Array <<readonly>>
  +location: object <<readonly>>
  +{static} displayNamePrefix: String
  +{static} internalLocation: object<INTERNAL>
  +{static} root: AbstractContract
  +{static} contractFunctionDisplayName(f: FunctionWithImplementation): String
  +{static} bindContractFunction: Function
  +{static} isAGeneralContractFunction(f: Any): Boolean
  +{static} isAContractFunction(f: Any): Boolean
  +{static} bless(contractFunction: GeneralContractFunction, contract: AbstractContract, implFunction: Function, location: String): void
  +{static} falseCondition(): Boolean = false
  +{static} AbstractContract({pre: Function[]?, post: Function[]?, exception: Function[]?}, location: object?)
}

class InternalContract {
  +{static} InternalContract(pre: Function[]?, post: Function[]?, exception: Function[]?)
  +location: object<INTERNAL>
}
AbstractContract <|-- InternalContract

class Contract {
  +{static} Contract(pre: Function[]?, post: Function[]?, exception: Function[]?)
  +implementation(implFunction: Function): ContractFunction
}
AbstractContract <|-- Contract

interface GeneralContractFunction {
  +location: object <<readonly>>
  +/displayName: String
  +bind(…): GeneralContractFunction
}
AbstractContract +-- GeneralContractFunction
GeneralContractFunction --> "contract" AbstractContract

interface InternalContractFunction {
  +location: object<INTERNAL> <<readonly>>
}
GeneralContractFunction <|-- InternalContractFunction
InternalContractFunction --> "contract" InternalContract

interface ContractFunction {
  +location: string <<readonly>>
  +bind(…): ContractFunction
}
AbstractContract +-- ContractFunction
GeneralContractFunction <|.. ContractFunction
ContractFunction --> "contract" Contract

abstract class GeneralAbstractContractFunction
GeneralContractFunction <|- GeneralAbstractContractFunction
AbstractContract --> "abstract <<readonly>>" GeneralAbstractContractFunction

class InternalAbstractContractFunction
GeneralAbstractContractFunction <|-- InternalAbstractContractFunction
InternalContractFunction <|.. InternalAbstractContractFunction
InternalContract --> "abstract <<readonly>>" InternalAbstractContractFunction

class AbstractContractFunction
GeneralAbstractContractFunction <|- AbstractContractFunction
ContractFunction <|.. AbstractContractFunction
Contract --> "abstract <<readonly>>" AbstractContractFunction

abstract class ContractError {
  +name: String = "Contract Error"
  +message: String <<readonly>>
  +/stack: String <<multiline>>
  +{static} ContractError(message)
}
Error <|-- ContractError

class AbstractError {
  +name: String = "Abstract Error"
  +message: String <<readonly>>
  +{static} AbstractError(contract)
}
AbstractContract +-- AbstractError
ContractError <|-- AbstractError
GeneralAbstractContractFunction ..> AbstractError : "<<throws>>"

AbstractError --> "contract <<readonly>>" AbstractContract

abstract class ConditionError {
  +name: String = "Contract Condition Error"
  +self: Object <<readonly>>
  +args: ArrayLike <<readonly>>
  +/stack: String <<multiline>>
  +getDetails(): String
  +{static} ConditionError(contractFunction, condition, self, args)
}
ContractError <|-- ConditionError

class ConditionMetaError {
  +{static} name: String <<readonly>>
  +error: Any <<readonly>>
  +message: String <<readonly>>
  +getDetails(): String
  +{static} ConditionMetaError(contractFunction, condition, self, args, error)
}

abstract class ConditionViolation {
  +{static} name: String <<readonly>>
  +verify(contractFunction, condition, self, args): void <<prototype>>
  +verifyAll(contractFunction, conditions, self, args): void <<prototype>>
  +{static} ConditionViolation(contractFunction, condition, self, args)
}
class PreconditionViolation {
  +{static} name: String <<readonly>>
  +{static} PreconditionViolation(contractFunction, condition, self, args)
}
class PostconditionViolation {
  +{static} name: String <<readonly>>
  +result: Any <<readonly>>
  +getDetails(): String
  +{static} PostconditionViolation(contractFunction, condition, self, args, result: Any)
}

class ExceptionConditionViolation {
  +{static} name: String <<readonly>>
  +exception: Any <<readonly>>
  +getDetails(): String
  +{static} ExceptionConditionViolation(contractFunction, condition, self, args, exception: Any)
}

ConditionError --> "contractFunction <<readonly>>" GeneralContractFunction
ConditionError --> "condition <<readonly>>" Function
ConditionError --> "_stackSource <<readonly, frozen>>" Error

ConditionError <|-- ConditionMetaError
ConditionError <|-- ConditionViolation

ConditionViolation <|-- PreconditionViolation
ConditionViolation <|-- PostconditionViolation
ConditionViolation <|-- ExceptionConditionViolation

Contract ..> ConditionMetaError: <<use>>
Contract ..> PreconditionViolation: <<use>>
Contract ..> PostconditionViolation: <<use>>
Contract ..> ExceptionConditionViolation: <<use>>
Contract ..> ContractFunction: <<generates>>

@enduml
